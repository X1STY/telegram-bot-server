import { Injectable, OnModuleInit } from '@nestjs/common';
import TelegramBot = require('node-telegram-bot-api');
import { PrismaService } from 'prisma.service';
import { InfoPageAboutZone } from './InfoAboutEconomicZone/EconomicZonePage';
import { PrismaClient, User } from '@prisma/client';
import { pathToImageFolder } from '@/constants';
import { BecomeAResident } from './BecomeAResident/BecomeAResident';
import { AlreadyRegistered } from './AlreadyRegistered/AlreadyRegistered';
import { MainMenu } from './markups';
import { AdminPanel } from './AdminPanel/AdminPanel';

@Injectable()
export class BotService implements OnModuleInit {
  constructor(private readonly prisma: PrismaService) {}

  onModuleInit = async () => {
    await this.botMessage();
  };

  botMessage = async () => {
    const bot = new TelegramBot(process.env.BOT_API, { polling: true });
    bot.onText(/\/start/, async (msg) => {
      const user = await findUserById(msg.from.id.toString(), this.prisma);
      if (!user) {
        await this.createNewUser(
          msg.from.id.toString(),
          msg.from.username ?? '',
          msg.from.first_name ?? '' + msg.from.last_name ?? ''
        );
      }

      await bot.sendPhoto(msg.chat.id, pathToImageFolder + '–û–±–ª–æ–∂–∫–∞.png', {
        reply_markup: MainMenu(),
        parse_mode: 'HTML',
        caption: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${msg.from.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, –ø–æ—Å–≤—è—â–µ–Ω–Ω–æ–≥–æ –æ—Å–æ–±–æ–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –∑–æ–Ω–µ –¢–æ–º—Å–∫–∞. –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º. –ù–∞—á–Ω–µ–º –Ω–∞—à–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–∏—Ä—É —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –≤–º–µ—Å—Ç–µ! üöÄ`
      });
      return;
    });
    bot.on('polling_error', (msg) => {
      console.log(msg);
    });
    bot.on('message', (msg) => {
      InfoPageAboutZone(bot, msg);
      BecomeAResident(bot, msg, this.prisma);
      AlreadyRegistered(bot, msg, this.prisma);
      backToMainMenuHandler(bot, msg);
      AdminPanel(bot, msg, this.prisma);
    });
  };

  createNewUser = async (telegramId: string, username: string, full_name: string) => {
    await this.prisma.user.create({
      data: {
        telegramId,
        username,
        full_name
      }
    });
  };
}

export const findUserById = async (telegramId: string, prisma: PrismaClient): Promise<User> => {
  return await prisma.user.findFirst({
    where: {
      telegramId
    }
  });
};

const backToMainMenuHandler = async (bot: TelegramBot, msg: TelegramBot.Message) => {
  if (msg.text !== '–í –Ω–∞—á–∞–ª–æ') {
    return;
  }
  await bot.sendMessage(msg.from.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é!', {
    reply_markup: MainMenu()
  });
};
